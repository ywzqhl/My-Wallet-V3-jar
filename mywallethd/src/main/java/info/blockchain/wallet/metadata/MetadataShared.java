package info.blockchain.wallet.metadata;

import com.google.gson.Gson;

import info.blockchain.api.MetadataEndpoints;
import info.blockchain.wallet.exceptions.ValidationException;
import info.blockchain.wallet.metadata.data.Auth;
import info.blockchain.wallet.metadata.data.Invitation;
import info.blockchain.wallet.metadata.data.Message;
import info.blockchain.wallet.metadata.data.MetadataRequest;
import info.blockchain.wallet.metadata.data.MetadataResponse;
import info.blockchain.wallet.metadata.data.PaymentRequest;
import info.blockchain.wallet.metadata.data.PaymentRequestResponse;
import info.blockchain.wallet.metadata.data.PublicContactDetails;
import info.blockchain.wallet.metadata.data.Status;
import info.blockchain.wallet.metadata.data.Trusted;
import info.blockchain.wallet.util.MetadataUtil;

import org.apache.commons.codec.binary.Base64;
import org.bitcoinj.core.ECKey;
import org.bitcoinj.crypto.DeterministicKey;
import org.bitcoinj.params.MainNetParams;
import org.spongycastle.util.encoders.Hex;

import java.security.SignatureException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;

import okhttp3.OkHttpClient;
import okhttp3.logging.HttpLoggingInterceptor;
import retrofit2.Call;
import retrofit2.Response;
import retrofit2.Retrofit;
import retrofit2.converter.gson.GsonConverterFactory;

public class MetadataShared {

    final int TYPE_PAYMENT_REQUEST = 1;
    final int TYPE_PAYMENT_REQUEST_RESPONSE = 2;

    private MetadataEndpoints endpoints;
    private String token;
    private String publicXpub;
    private String address;
    private DeterministicKey node;

    private byte[] magicHash;

    public MetadataShared(DeterministicKey masterHDNode) throws Exception {

        HttpLoggingInterceptor interceptor = new HttpLoggingInterceptor();
        interceptor.setLevel(HttpLoggingInterceptor.Level.BODY);
        OkHttpClient client = new OkHttpClient.Builder().addInterceptor(interceptor).build();

        Retrofit retrofit = new Retrofit.Builder()
                .baseUrl(MetadataEndpoints.API_URL)
//                .client(client)
                .addConverterFactory(GsonConverterFactory.create())
                .build();
        endpoints = retrofit.create(MetadataEndpoints.class);

        setMetadataNode(masterHDNode);
        this.token = getToken();
    }

    /**
     * Set shared metadata node and address
     * Set encryption key:
     * purpose' / type' / 0' : https://meta.blockchain.info/{address} - signature used to authenticate
     * purpose' / type' / 1' : sha256(private key) used as 256 bit AES key
     * @param masterHDNode
     * @throws Exception
     */
    private void setMetadataNode(DeterministicKey masterHDNode) throws Exception{

        int purpose = MetadataUtil.getPurpose();

        DeterministicKey metaDataHDNode = MetadataUtil.deriveHardened(masterHDNode, purpose);

        this.address = metaDataHDNode.toAddress(MainNetParams.get()).toString();
        this.node = metaDataHDNode;
        this.publicXpub = metaDataHDNode.serializePubB58(MainNetParams.get());
        fetch();
        publishXpub(publicXpub);
    }

    private void fetch() throws Exception{

        Call<MetadataResponse> response = endpoints.getMetadata(address);

        Response<MetadataResponse> exe = response.execute();

        if (exe.isSuccessful()) {
            MetadataResponse body = exe.body();

            byte[] encryptedPayloadBytes = new String(Base64.decodeBase64(exe.body().getPayload())).getBytes("utf-8");

            if(body.getPrev_magic_hash() != null){
                byte[] prevMagicBytes = Hex.decode(body.getPrev_magic_hash());
                magicHash = MetadataUtil.magic(encryptedPayloadBytes, prevMagicBytes);
            } else {
                magicHash = MetadataUtil.magic(encryptedPayloadBytes, null);
            }

        } else {
            if(exe.code() == 404) {
                magicHash = null;
            } else {
                throw new Exception(exe.code() + " " + exe.message());
            }
        }
    }

    /**
     * @return address
     */
    public String getAddress() {
        return this.address;
    }

    /**
     * Get nonce generated by the server (auth challenge).
     */
    private String getNonce() throws Exception {

        Call<Auth> response = endpoints.getNonce();

        Response<Auth> exe = response.execute();

        if (exe.isSuccessful()) {
            return exe.body().getNonce();
        } else {
            throw new Exception(exe.code() + " " + exe.message());
        }
    }

    /**
     * Get JSON Web Token if signed nonce is correct. Signed.
     */
    protected String getToken() throws Exception {

        String nonce = getNonce();
        String sig = node.signMessage(nonce);

        HashMap<String, String> map = new HashMap<>();
        map.put("mdid", address);
        map.put("signature", sig);
        map.put("nonce", nonce);
        Call<Auth> response = endpoints.getToken(map);

        Response<Auth> exe = response.execute();

        if (exe.isSuccessful()) {
            return exe.body().getToken();
        } else {
            throw new Exception(exe.code() + " " + exe.message());
        }
    }

    /**
     * Get list of all trusted MDIDs. Authenticated.
     */
    public Trusted getTrustedList() throws Exception {

        Call<Trusted> response = endpoints.getTrustedList("Bearer " + token);

        Response<Trusted> exe = response.execute();

        if (exe.isSuccessful()) {
            return exe.body();
        } else {
            throw new Exception(exe.code() + " " + exe.message());
        }
    }

    /**
     * Check if a contact is on trusted list of mdid. Authenticated.
     */
    public boolean getTrusted(String mdid) throws Exception {

        Call<Trusted> response = endpoints.getTrusted("Bearer " + token, mdid);

        Response<Trusted> exe = response.execute();

        if (exe.isSuccessful()) {
            return Arrays.asList(exe.body().getContacts()).contains(mdid);
        } else {
            throw new Exception(exe.code() + " " + exe.message());
        }
    }

    /**
     * Add a contact to trusted list of mdid. Authenticated.
     */
    public boolean putTrusted(String mdid) throws Exception {

        Call<Trusted> response = endpoints.putTrusted("Bearer " + token, mdid);

        Response<Trusted> exe = response.execute();

        if (exe.isSuccessful()) {
            return mdid.equals(exe.body().getContact());
        } else {
            throw new Exception(exe.code() + " " + exe.message());
        }
    }

    /**
     * Delete a contact from trusted list of mdid. Authenticated.
     */
    public boolean deleteTrusted(String mdid) throws Exception {

        Call<Status> response = endpoints.deleteTrusted("Bearer " + token, mdid);

        Response<Status> exe = response.execute();

        if (exe.isSuccessful()) {
            return true;
        } else {
            throw new Exception(exe.code() + " " + exe.message());
        }
    }

    /**
     * Add new shared metadata entry. Signed. Authenticated.
     */
    private Message postMessage(String mdid, String message, int type) throws Exception {

        String recipientXpub = getPublicXpubFromMdid(mdid);

        String encryptedMessage = MetadataUtil.encryptFor(node, recipientXpub, message);

        String b64Msg = new String(Base64.encodeBase64String(encryptedMessage.getBytes()));

        String signature = node.signMessage(b64Msg);

        Message request = new Message();
        request.setRecipient(mdid);
        request.setType(type);
        request.setPayload(b64Msg);
        request.setSignature(signature);

        Call<Message> response = endpoints.postMessage("Bearer " + token, request);

        Response<Message> exe = response.execute();

        if (exe.isSuccessful()) {
            return exe.body();
        } else {
            throw new Exception(exe.code() + " " + exe.message());
        }

    }

    /**
     * Get messages sent to my MDID. Authenticated.
     */
    private List<Message> getMessages(boolean onlyProcessed) throws Exception {

        Call<List<Message>> response = endpoints.getMessages("Bearer " + token, onlyProcessed);

        Response<List<Message>> exe = response.execute();

        if (exe.isSuccessful()) {

            for(Message msg : exe.body()){
                verifiedAndDecryptMessage(msg);
            }

            return exe.body();
        } else {
            throw new Exception(exe.code() + " " + exe.message());
        }
    }

    /**
     * Get messages sent to my MDID. Authenticated.
     */
    private List<Message> getMessages(String lastMessageId) throws Exception {

        Call<List<Message>> response = endpoints.getMessages("Bearer " + token, lastMessageId);

        Response<List<Message>> exe = response.execute();

        if (exe.isSuccessful()) {

            for(Message msg : exe.body()){
                verifiedAndDecryptMessage(msg);
            }

            return exe.body();
        } else {
            throw new Exception(exe.code() + " " + exe.message());
        }
    }

    /**
     * Get message from message id. Authenticated.
     */
    private Message getMessage(String messageId) throws Exception {

        Call<Message> response = endpoints.getMessage("Bearer " + token, messageId);

        Response<Message> exe = response.execute();

        if (exe.isSuccessful()) {

            Message msg = exe.body();
            verifiedAndDecryptMessage(msg);
            return msg;
        } else {
            throw new Exception(exe.code() + " " + exe.message());
        }
    }

    public Message sendPaymentRequest(String mdid, PaymentRequest paymentRequest) throws Exception {
        return postMessage(mdid, new Gson().toJson(paymentRequest), TYPE_PAYMENT_REQUEST);
    }

    public Message acceptPaymentRequest(String mdid, PaymentRequest paymentRequest, String note, String receiveAddress) throws Exception {

        PaymentRequestResponse response = new PaymentRequestResponse();
        response.setAmount(paymentRequest.getAmount());
        response.setNote(note);
        response.setAddress(receiveAddress);

        return postMessage(mdid, new Gson().toJson(response), TYPE_PAYMENT_REQUEST_RESPONSE);
    }


    public List<PaymentRequest> getPaymentRequests(boolean onlyProcessed) throws Exception {

        List<PaymentRequest> requests = new ArrayList<>();

        List<Message> messages = getMessages(onlyProcessed);

        for(Message message : messages){

            if(message.getType() == TYPE_PAYMENT_REQUEST) {
                requests.add(new Gson().fromJson(message.getPayload(), PaymentRequest.class));
            }
        }

        return requests;
    }

    public List<PaymentRequestResponse> getPaymentRequestResponses(boolean onlyProcessed) throws Exception {

        List<PaymentRequestResponse> responses = new ArrayList<>();

        List<Message> messages = getMessages(onlyProcessed);

        for (Message message : messages){

            if(message.getType() == TYPE_PAYMENT_REQUEST_RESPONSE) {
                responses.add(new Gson().fromJson(message.getPayload(), PaymentRequestResponse.class));
            }
        }

        return responses;
    }

    /**
     * Verify message signature and return decrypted.
     * @param msg
     * @return
     * @throws Exception
     */
    private void verifiedAndDecryptMessage(Message msg) throws Exception {

        validateSignature(msg);

        String senderXpub = getPublicXpubFromMdid(msg.getSender());

        String message = new String(Base64.decodeBase64(msg.getPayload()));
        msg.setPayload(MetadataUtil.decryptFrom(node, senderXpub, message));
    }

    private void validateSignature(Message msg) throws ValidationException, SignatureException {

        ECKey key = ECKey.signedMessageToKey(
                msg.getPayload(),
                msg.getSignature());

        String senderAddress = msg.getSender();
        String addressFromSignature = key.toAddress(MainNetParams.get()).toString();

        if(!senderAddress.equals(addressFromSignature)) {
            throw new ValidationException("Signature is not well-formed");
        }
    }

    /**
     * Obtains a one-time UUID for key sharing Gets MDID of sender from one-time UUID
     */
    public Invitation createInvitation() throws Exception {

        Call<Invitation> response = endpoints.postShare("Bearer " + token);

        Response<Invitation> exe = response.execute();

        if (exe.isSuccessful()) {
            return exe.body();
        } else {
            throw new Exception(exe.code() + " " + exe.message());
        }
    }

    /**
     * Sets the MDID of the recipient
     */
    public Invitation acceptInvitation(String uuid) throws Exception {

        Call<Invitation> response = endpoints.postToShare("Bearer " + token, uuid);

        Response<Invitation> exe = response.execute();

        if (exe.isSuccessful()) {
            return exe.body();
        } else {
            throw new Exception(exe.code() + " " + exe.message());
        }
    }

    /**
     * Gets MDID of sender from one-time UUID
     */
    public Invitation readInvitation(String uuid) throws Exception {

        Call<Invitation> response = endpoints.getShare("Bearer " + token, uuid);

        Response<Invitation> exe = response.execute();

        if (exe.isSuccessful()) {
            return exe.body();
        } else {
            throw new Exception(exe.code() + " " + exe.message());
        }
    }

    /**
     * Deletes one-time UUID
     */
    public boolean deleteInvitation(String uuid) throws Exception {

        Call<Invitation> response = endpoints.deleteShare("Bearer " + token, uuid);

        Response<Invitation> exe = response.execute();

        if (exe.isSuccessful()) {
            return true;
        } else {
            throw new Exception(exe.code() + " " + exe.message());
        }
    }

    /**
     * Publish xpub (public readable)
     */
    public void publishXpub(String xpub) throws Exception {

        PublicContactDetails publicXpub = new PublicContactDetails();
        publicXpub.setXpub(xpub);

        byte[] xpubBytes = new Gson().toJson(publicXpub).getBytes("utf-8");
        byte[] nextMagicHash = MetadataUtil.magic(xpubBytes, magicHash);

        byte[] message = MetadataUtil.message(xpubBytes, magicHash);

        String signature = node.signMessage(Base64.encodeBase64String(message));

        MetadataRequest body = new MetadataRequest();
        body.setPayload(Base64.encodeBase64String(xpubBytes));
        body.setSignature(signature);
        body.setPrev_magic_hash(magicHash != null ? Hex.toHexString(magicHash) : null);

        Call<Void> response = endpoints.putMetadata(address, body);

        Response<Void> exe = response.execute();

        if (!exe.isSuccessful()) {
            throw new Exception(exe.code() + " " + exe.message());
        } else {
            magicHash = nextMagicHash;
        }
    }

    /**
     * Get public xpub for specified mdid
     */
    public String getPublicXpubFromMdid(String mdid) throws Exception {

        Call<MetadataResponse> response = endpoints.getMetadata(mdid);

        Response<MetadataResponse> exe = response.execute();

        if (exe.isSuccessful()) {
            String payload = new String(Base64.decodeBase64(exe.body().getPayload()));
            PublicContactDetails publicXpub = new Gson().fromJson(payload, PublicContactDetails.class);
            return publicXpub.getXpub();
        } else {
            throw new Exception(exe.code() + " " + exe.message());
        }
    }
}